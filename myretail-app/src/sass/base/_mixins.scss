//------------------------------------//
//  $MIXINS
//------------------------------------//


//---------------------
// Vertical and Horizontal Padding
@mixin padding-horizontal($amount) {
  padding-left: $amount + rem;
  padding-right: $amount + rem;
}

@mixin padding-vertical($amount) {
  padding-top: $amount + rem;
  padding-bottom: $amount + rem;
}


//---------------------
// Media Queries
@mixin media($feature:false, $from:false, $upto:false, $type:screen) {
  $min-width: 0;
  $max-width: 0;
  $media-query: '';

  // From: this breakpoint (inclusive)
  @if $from {
    @if type-of($from) == number {
      $min-width: px2em($from);
    } @else if get-breakpoint-width($from) {
      $min-width: px2em(get-breakpoint-width($from));
    }
  }

  // Upto: that breakpoint (exclusive)
  @if $upto {
    @if type-of($upto) == number {
      $max-width: px2em($upto);
    } @else if get-breakpoint-width($upto) {
      $max-width: px2em(get-breakpoint-width($upto)) - .01em;
    }
  }

  @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }
  @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }
  @if $feature {
    // Pass through custom expression or get defined expression
    $original-feature: $feature;
    $feature: get-feature($feature);
    @if $feature {
      $media-query: '#{$media-query} and #{$feature}';
    } @else {
      $media-query: '#{$media-query} and (#{$original-feature})';
    }
  }

  // Remove unnecessary media query prefix 'all and '
  @if ($type == 'all' and $media-query != '') {
    $type: '';
    $media-query: str-slice(unquote($media-query), 6);
  }

  @media #{$type + $media-query} {
    @content;
  }
}